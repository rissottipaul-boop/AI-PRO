name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  build:
    name: Build & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            mypy-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-${{ matrix.python-version }}-
      - name: "Quality (pre-commit: ruff, black, mypy)"
        run: pre-commit run --all-files --show-diff-on-failure || exit 1
      - name: Tests & Coverage
        run: pytest --cov=src/autonomous_dev --cov-report=term-missing --cov-report=xml
      - name: Coverage summary
        run: >-
          python -c "import xml.etree.ElementTree as ET;\nroot=ET.parse('coverage.xml').getroot();\nrate=float(root.get('line-rate',0))*100;\nprint(f'COVERAGE LINE RATE: {rate:.2f}%')"
      - name: Upload coverage to Codecov
        if: ${{ success() && matrix.python-version == '3.11' }}
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          verbose: true
      - name: Upload coverage artifact
        if: ${{ success() && matrix.python-version == '3.11' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
          pip install cyclonedx-bom
      - name: Gitleaks - Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Bandit
        run: bandit -q -r src/autonomous_dev
      - name: pip-audit (fail on HIGH)
        run: pip-audit --fail-on HIGH
      - name: Deptry
        run: deptry .
      - name: Generate SBOM (CycloneDX)
        run: cyclonedx-py --format json --output sbom.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
